{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "JS",
      "decoder" : "// Decode an uplink message from a buffer\r\n// payload - array of bytes\r\n// metadata - key/value object\r\n\r\n/** Decoder **/\r\n\r\n// decode payload to string\r\nvar payloadStr = decodeToString(payload);\r\n\r\n// decode payload to JSON\r\n var data = decodeToJson(payload);\r\n\r\nvar deviceName = data.deviceInfo.deviceName;\r\n// use assetName and assetType instead of deviceName and deviceType\r\n// to automatically create assets instead of devices.\r\n// var assetName = 'Asset A';\r\n// var assetType = 'building';\r\n\r\n// Result object with device/asset attributes/telemetry data\r\nvar result = {\r\n// Use deviceName and deviceType or assetName and assetType, but not both.\r\n   deviceName: deviceName,\r\n   \r\n   telemetry: {\r\n      line_1_period_in: data.object.line_1_period_in,\r\n      line_1_period_out: data.object.line_1_period_out,\r\n      line_2_period_in: data.object.line_2_period_in,\r\n      line_2_period_out: data.object.line_2_period_out,\r\n      line_3_period_in: data.object.line_3_period_in,\r\n      line_3_period_out: data.object.line_3_period_out,\r\n      line_1_total_out: data.object. line_1_total_out,\r\n      line_1_total_in : data.object. line_1_total_in,\r\n      \r\n      \r\n      region_1_count : data.object.region_1_count,\r\n      region_1_max_dwell : data.object.region_1_max_dwell,\r\n      region_1_avg_dwell : data.object.region_1_avg_dwell,\r\n\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      battery:data.object.battery\r\n      \r\n     /* \"line_2_period_in\": 0.0,\r\n        \"line_3_period_out\": 2.0,\r\n        \"line_1_period_in\": 2.0,\r\n        \"line_1_period_out\": 0.0,\r\n        \"line_3_period_in\": 1.0,\r\n        \"line_2_period_out\": 0.0*/\r\n      \r\n   }\r\n};\r\n\r\n/** Helper functions **/\r\n\r\nfunction decodeToString(payload) {\r\n   return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n   // covert payload to string.\r\n   var str = decodeToString(payload);\r\n\r\n   // parse string to JSON\r\n   var data = JSON.parse(str);\r\n   return data;\r\n}\r\n\r\nreturn result;",
      "tbelDecoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : [ "manufacturer" ]
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "800324f0-4991-11ef-aac4-6f8a84baac26"
    },
    "name" : "Uplink data converter for ToF People Counter",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}